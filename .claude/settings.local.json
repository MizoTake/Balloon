{
  "permissions": {
    "allow": [
      "Bash(mkdir:*)",
      "Bash(find:*)",
      "Bash(ls:*)",
      "Bash(gh issue create:*)",
      "Bash(echo $PATH)",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"Implement PBR Shaders for Balloons\" --body \"Task 3.1: Physical-Based Rendering Shader Implementation\n\nDescription:\nCreate PBR shaders for realistic balloon rendering with reflection, refraction, and transparency.\n\nRequirements:\n- Create balloon-specific PBR shader with reflection, refraction, transparency\n- Implement material properties (metallic, matte, transparent)\n- Add dynamic environment mapping and lighting system\n- Support for various balloon materials (latex, foil, transparent)\n\nRelated Spec Requirements:\n- 1.1: Material variation system\n- 1.4: Dynamic color support\n- 1.5: Environment reflections\n\nAcceptance Criteria:\n- Shader supports all material types\n- Real-time environment reflections work\n- Performance impact minimal at 50k instances\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"Implement Real-time Deformation Rendering\" --body \"Task 3.2: Real-time Deformation Rendering Implementation\n\nDescription:\nCreate mesh deformation system using deformation data for realistic balloon shape changes.\n\nRequirements:\n- Implement mesh deformation system using deformation data\n- GPU vertex deformation calculations\n- Normal/tangent recalculation based on deformation\n- Integration with existing DeformationJob\n\nRelated Spec Requirements:\n- 1.2: Real-time shape changes\n- 2.1, 2.2: Deformation visualization\n\nAcceptance Criteria:\n- Smooth real-time deformation visible\n- No visual artifacts during deformation\n- Performance maintained at high instance counts\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"Optimize Large-scale Instance Rendering\" --body \"Task 3.3: Large-scale Instance Rendering Optimization\n\nDescription:\nImplement IndirectRendering system for 50,000+ balloon instances with GPU optimization.\n\nRequirements:\n- Implement Graphics.DrawMeshInstancedIndirect for 50k instances\n- GPU Instancing optimization and batching\n- Dynamic LOD system and frustum culling\n- Integration with existing LOD system\n\nRelated Spec Requirements:\n- 1.3: Large instance support\n- 4.1, 4.3: Performance optimization\n\nAcceptance Criteria:\n- Support 50,000 instances at target framerate\n- Efficient GPU memory usage\n- Seamless LOD transitions\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"GPU Compute Shader Integration\" --body \"Task 5: GPU Compute Shader Integration System\n\nDescription:\nImplement Compute Shaders for physics calculations and fluid visualization.\n\nSub-tasks:\n5.1: Physics Compute Shaders\n- Port balloon physics calculations to GPU\n- Optimize CPU-GPU data transfer\n- Parallel processing optimization\n\n5.2: Fluid Visualization Compute Shaders\n- Air flow visualization shaders\n- Vortex and pressure wave visualization\n- Real-time fluid particle generation\n\nRelated Spec Requirements:\n- 4.4, 4.5: GPU acceleration\n- 7.1, 7.2, 7.3: Fluid visualization\n\nAcceptance Criteria:\n- Significant performance improvement from GPU physics\n- Minimal CPU-GPU transfer overhead\n- Beautiful fluid visualization effects\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"Burst and Particle Effects System\" --body \"Task 6: Burst and Particle Effects System Implementation\n\nDescription:\nCreate physically accurate balloon burst system with particle effects.\n\nRequirements:\n- Physical fragment generation system for balloon bursts\n- Procedural burst pattern generation\n- Physical scattering simulation for fragments\n- Integration with Unity''s particle system\n\nRelated Spec Requirements:\n- 2.5: Burst mechanics\n- 6.4: Visual effects\n\nAcceptance Criteria:\n- Realistic burst patterns based on pressure\n- Physically accurate fragment trajectories\n- Performance-friendly particle effects\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"Adaptive Quality Adjustment System\" --body \"Task 7.2: Adaptive Quality Adjustment System\n\nDescription:\nImplement automatic quality adjustment based on performance metrics.\n\nRequirements:\n- Performance-based automatic quality adjustment\n- Dynamic LOD level adjustment system\n- Emergency performance mode implementation\n- Integration with PerformanceProfiler\n\nRelated Spec Requirements:\n- 4.2, 4.5: Dynamic optimization\n\nAcceptance Criteria:\n- Maintains target framerate automatically\n- Smooth quality transitions\n- User-configurable performance targets\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"Advanced Environment Interaction System\" --body \"Task 9: Advanced Environment Interaction System\n\nDescription:\nImplement complex collision and environmental fluid effects.\n\nSub-tasks:\n9.1: Complex Obstacle Collision\n- High-precision mesh collider detection\n- Complex deformation at contact surfaces\n- Material-specific friction/restitution\n\n9.2: Environmental Fluid Effects\n- Terrain-based wind flow changes\n- Temperature gradient thermal convection\n- Water surface interaction (surface tension/buoyancy)\n\nRelated Spec Requirements:\n- 5.1, 5.3: Advanced collisions\n- 5.2, 5.4: Environmental effects\n\nAcceptance Criteria:\n- Accurate mesh collider interactions\n- Realistic environmental fluid dynamics\n- Performance-optimized calculations\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"Procedural Aesthetics System\" --body \"Task 10: Procedural Aesthetics System\n\nDescription:\nImplement automatic visual generation and optimization systems.\n\nSub-tasks:\n10.1: Automatic Color/Pattern Generation\n- Diverse balloon color generation algorithms\n- Procedural pattern/texture generation\n- Aesthetic placement optimization\n\n10.2: Dynamic Visual Effects\n- Time-based aging effects for balloons\n- Camera angle-based visual optimization\n- Beautiful particle scattering patterns\n\nRelated Spec Requirements:\n- 6.1, 6.2: Visual diversity\n- 6.3, 6.5: Dynamic aesthetics\n\nAcceptance Criteria:\n- Visually diverse balloon appearances\n- Natural aging and wear effects\n- Optimized visual composition\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"Scientific Verification and Analysis System\" --body \"Task 11: Scientific Verification and Analysis System\n\nDescription:\nImplement physics validation and statistical analysis tools.\n\nSub-tasks:\n11.1: Physics Law Verification\n- Energy conservation verification\n- Momentum conservation verification\n- Theoretical vs actual error measurement\n\n11.2: Statistical Analysis and Data Export\n- Velocity/density distribution statistics\n- Real-time data visualization\n- CSV/JSON data export functionality\n\nRelated Spec Requirements:\n- 8.1, 8.2: Physics accuracy\n- 8.4, 8.5: Data analysis\n\nAcceptance Criteria:\n- Accurate physics validation reports\n- Comprehensive statistical analysis\n- Easy data export for external analysis\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"Comprehensive Test System\" --body \"Task 12: Comprehensive Test System Implementation\n\nDescription:\nCreate automated testing framework for physics accuracy and performance.\n\nSub-tasks:\n12.1: Automated Physics Accuracy Tests\n- Known physics problem solution verification\n- Long-term numerical stability tests\n- Boundary condition behavior tests\n\n12.2: Performance Test Suite\n- Benchmarks for 1k, 10k, 50k instances\n- Memory usage profiling tests\n- Frame rate stability tests\n- Integration with PerformanceTestFramework\n\nRelated Spec Requirements:\n- 4.1, 4.5: Performance targets\n- 8.2, 8.3: Accuracy validation\n\nAcceptance Criteria:\n- Automated test execution\n- Clear pass/fail criteria\n- Performance regression detection\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"Final Integration and Optimization\" --body \"Task 13: Final Integration and Optimization\n\nDescription:\nComplete system integration, optimization, and documentation.\n\nSub-tasks:\n13.1: System Integration\n- Inter-subsystem coordination\n- Unified API design\n- Integrated error handling\n\n13.2: Final Performance Optimization\n- Profile-based optimization\n- Memory access pattern optimization\n- GPU-CPU parallel processing optimization\n\n13.3: Documentation and Samples\n- Comprehensive API documentation\n- Sample scenes and usage examples\n- Interactive demo system\n\nRelated Spec Requirements:\n- All requirements integration\n- 4.1-4.5: Performance optimization\n\nAcceptance Criteria:\n- All systems work together seamlessly\n- Meets all performance targets\n- Complete documentation and examples\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue create --title \"Complete Memory Management System\" --body \"Task 8: Memory Management and Optimization System\n\nDescription:\nImplement comprehensive memory management for large-scale simulations.\n\nRequirements:\n- NativeArray pool system implementation\n- Garbage collection minimization\n- Memory leak detection and auto-repair\n- Integration with existing BalloonMemoryManager\n\nRelated Spec Requirements:\n- 4.5: Memory optimization\n\nAcceptance Criteria:\n- Zero memory leaks during extended runs\n- Minimal GC allocations\n- Efficient memory reuse patterns\")",
      "Bash(\"/mnt/c/Program Files/GitHub CLI/gh.exe\" issue list --limit 15)"
    ],
    "deny": []
  },
  "enableAllProjectMcpServers": true,
  "enabledMcpjsonServers": [
    "unity-natural-mcp"
  ]
}